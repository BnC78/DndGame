package view;

import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

public class DiceThrowPanel extends javax.swing.JPanel {

    private static final Pattern DICE_THROW_PATTERN = Pattern.compile("^(\\d+)d(\\d+)([+-]?)(\\d+)$");
    
    /**
     * Creates new form DiceThrowPanel
     */
    public DiceThrowPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfThrow = new javax.swing.JTextField();
        btnThrow = new javax.swing.JButton();
        lbSum = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDetails = new javax.swing.JTextArea();

        btnThrow.setText("Dobás");
        btnThrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThrowActionPerformed(evt);
            }
        });

        lbSum.setFont(new java.awt.Font("Tahoma", 0, 80)); // NOI18N
        lbSum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbSum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        taDescription.setEditable(false);
        taDescription.setBackground(new java.awt.Color(240, 240, 240));
        taDescription.setColumns(20);
        taDescription.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setText("Ezen a panelon egy kockadobást lehet leszimulálni a Dungeons & Dragons játékszabályai alapján. A dobás parancsát az alábbi szövegmezőbe kell begépelni. A dobás formátuma a következő: {kockák száma}d{kockák oldalainak száma}+{módosítószám} VAGY \n{kockák száma}d{kockák oldalainak száma}-{módosítószám}.\nA kapcsos zárojeleket el kell hagyni. A kockák száma minimum 1 kell legyen és a kocskák oldalainak száma minimum 4 kell legyen. A parancs beírása után a Dobás gombra kell kattintani.");
        taDescription.setWrapStyleWord(true);
        taDescription.setAutoscrolls(false);
        taDescription.setFocusable(false);
        taDescription.setOpaque(false);
        jScrollPane1.setViewportView(taDescription);

        taDetails.setEditable(false);
        taDetails.setBackground(new java.awt.Color(240, 240, 240));
        taDetails.setColumns(20);
        taDetails.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        taDetails.setLineWrap(true);
        taDetails.setRows(5);
        taDetails.setWrapStyleWord(true);
        taDetails.setFocusable(false);
        jScrollPane2.setViewportView(taDetails);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfThrow, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnThrow, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbSum, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfThrow)
                    .addComponent(btnThrow, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbSum, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function is called when the user clicks on the <i>Dobás</i> button.
     * It simulates a dice throw and then displays the details and the sum of the dice throw in their respective fields.
     * @param evt 
     */
    private void btnThrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThrowActionPerformed
        String diceThrow = tfThrow.getText();
        Matcher m = DICE_THROW_PATTERN.matcher(diceThrow);
        if (!m.matches()) {
            JOptionPane.showMessageDialog(this, "A dobás nem megfelelű formátumú.", "Hibás dobás!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int dices = Integer.valueOf(m.group(1));
        if (dices < 1) {
            JOptionPane.showMessageDialog(this, "Legalább 1 darab kockának kell lennie.", "Hibás dobás!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int sides = Integer.valueOf(m.group(2));
        if (sides < 4) {
            JOptionPane.showMessageDialog(this, "Legalább 4 oldalú kockának kell lennie.", "Hibás dobás!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Random random = new Random();
        String details = diceThrow + ":";
        int sum = 0;
        for (int i = 0; i < dices; ++i) {
            int roll = random.nextInt(sides) + 1;
            sum += roll;
            details += " " + roll;
            if (i != dices - 1) {
                details += " +";
            }
        }
        int modifier = Integer.valueOf(m.group(4));
        if (m.group(3).equals("+")) {
            sum += modifier;
        } else {
            sum -= modifier;
        }
        details += " " + m.group(3) + " " + modifier + " = " + sum;
        taDetails.setText(details);
        lbSum.setText(String.valueOf(sum));
    }//GEN-LAST:event_btnThrowActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnThrow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbSum;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextArea taDetails;
    private javax.swing.JTextField tfThrow;
    // End of variables declaration//GEN-END:variables
}
