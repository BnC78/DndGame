package view;

import character.Ability;
import character.AbilityDAOException;
import character.AbilityRepository;
import character.AbilityRepositoryJDBCImpl;
import character.CharacterDAOException;
import character.CharacterRepository;
import character.CharacterRepositoryJDBCImpl;
import character.DndCharacter;
import character.Equipment;
import character.EquipmentDAOException;
import character.EquipmentRepository;
import character.EquipmentRepositoryJDBCImpl;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class CharacterPanel extends javax.swing.JPanel {

    private static DefaultListModel<DndCharacter> characterListModel;
    private CharacterRepository characterRepository;
    private AbilityRepository abilityRepository;
    private EquipmentRepository equipmentRepository;
    
    /**
     * Creates new form CharacterPanel
     */
    public CharacterPanel() {
        initComponents();
        try {
            characterRepository = new CharacterRepositoryJDBCImpl(DndFrame.getConn()); 
        } catch (CharacterDAOException ex) {
            JOptionPane.showMessageDialog(this, "Hiba a karakter adatbázisműveleteinek inicializálásakor. A program leáll.", "Adatbázis hiba!", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
            System.exit(1);
        }
        try {
            abilityRepository = new AbilityRepositoryJDBCImpl(DndFrame.getConn()); 
        } catch (AbilityDAOException ex) {
            JOptionPane.showMessageDialog(this, "Hiba a képesség adatbázisműveleteinek inicializálásakor. A program leáll.", "Adatbázis hiba!", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        try {
            equipmentRepository = new EquipmentRepositoryJDBCImpl(DndFrame.getConn()); 
        } catch (EquipmentDAOException ex) {
            JOptionPane.showMessageDialog(this, "Hiba a felszerelés adatbázisműveleteinek inicializálásakor. A program leáll.", "Adatbázis hiba!", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        
        characterListModel = new DefaultListModel<>();
        List<DndCharacter> characters = null;
        try {
            characters = characterRepository.findAll();
        } catch (CharacterDAOException ex) {
            JOptionPane.showMessageDialog(this, "A karakterek betöltése sikertelen.", "Adatbázis hiba!", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
        }
        if (characters != null) {
            characterListModel.addAll(characters);
        }
        listCharacters.setModel(characterListModel);
        details.setVisible(false);
    }
    
    /**
     * Returns all the characters.
     * @return all the characters.
     */
    public static List<DndCharacter> getAllCharacters() {
        return Collections.list(characterListModel.elements());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbCharacters = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCharacters = new javax.swing.JList<>();
        btnDelete = new javax.swing.JButton();
        details = new javax.swing.JPanel();
        lbNameHeader = new javax.swing.JLabel();
        lbBirthPlaceHeader = new javax.swing.JLabel();
        lbRaceHeader = new javax.swing.JLabel();
        lbClassHeader = new javax.swing.JLabel();
        lbLevelHeader = new javax.swing.JLabel();
        lbHitPointsHeader = new javax.swing.JLabel();
        lbAbilitiesHeader = new javax.swing.JLabel();
        lbEquipmentHeader = new javax.swing.JLabel();
        lbName = new javax.swing.JLabel();
        lbBirthPlace = new javax.swing.JLabel();
        lbRace = new javax.swing.JLabel();
        lbClass = new javax.swing.JLabel();
        lbHitPoints = new javax.swing.JLabel();
        lbLevel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taEquipment = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        taAbilities = new javax.swing.JTextArea();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbCharacters.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbCharacters.setText("Karakterek:");

        btnNew.setText("Új...");
        btnNew.setMaximumSize(new java.awt.Dimension(81, 23));
        btnNew.setMinimumSize(new java.awt.Dimension(81, 23));
        btnNew.setPreferredSize(new java.awt.Dimension(81, 23));
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Módosít...");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        listCharacters.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listCharacters.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listCharacters.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCharactersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listCharacters);

        btnDelete.setText("Töröl");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbNameHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbNameHeader.setText("Név:");

        lbBirthPlaceHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbBirthPlaceHeader.setText("Születési hely:");

        lbRaceHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbRaceHeader.setText("Faj:");

        lbClassHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbClassHeader.setText("Osztály:");

        lbLevelHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbLevelHeader.setText("Szint:");

        lbHitPointsHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbHitPointsHeader.setText("HP:");

        lbAbilitiesHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbAbilitiesHeader.setText("Képességek:");

        lbEquipmentHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbEquipmentHeader.setText("Felszerelések:");

        lbName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lbBirthPlace.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lbRace.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lbClass.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lbHitPoints.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbLevel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        taEquipment.setEditable(false);
        taEquipment.setBackground(new java.awt.Color(240, 240, 240));
        taEquipment.setColumns(20);
        taEquipment.setLineWrap(true);
        taEquipment.setRows(5);
        taEquipment.setWrapStyleWord(true);
        taEquipment.setFocusable(false);
        jScrollPane2.setViewportView(taEquipment);

        taAbilities.setEditable(false);
        taAbilities.setBackground(new java.awt.Color(240, 240, 240));
        taAbilities.setColumns(20);
        taAbilities.setLineWrap(true);
        taAbilities.setRows(5);
        taAbilities.setWrapStyleWord(true);
        taAbilities.setFocusable(false);
        jScrollPane3.setViewportView(taAbilities);

        javax.swing.GroupLayout detailsLayout = new javax.swing.GroupLayout(details);
        details.setLayout(detailsLayout);
        detailsLayout.setHorizontalGroup(
            detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsLayout.createSequentialGroup()
                .addComponent(lbNameHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(detailsLayout.createSequentialGroup()
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailsLayout.createSequentialGroup()
                        .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(detailsLayout.createSequentialGroup()
                                .addComponent(lbRaceHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbRace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(detailsLayout.createSequentialGroup()
                                .addComponent(lbClassHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbClass, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbLevelHeader)
                            .addComponent(lbHitPointsHeader))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbHitPoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbLevel, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)))
                    .addGroup(detailsLayout.createSequentialGroup()
                        .addComponent(lbBirthPlaceHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbBirthPlace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(detailsLayout.createSequentialGroup()
                        .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbAbilitiesHeader)
                            .addComponent(lbEquipmentHeader))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(1, 1, 1))
            .addGroup(detailsLayout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(detailsLayout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        detailsLayout.setVerticalGroup(
            detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsLayout.createSequentialGroup()
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbNameHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(lbName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbBirthPlaceHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(lbBirthPlace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbRaceHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbLevelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbRace, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbClassHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbHitPointsHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbHitPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbAbilitiesHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbEquipmentHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(41, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbCharacters)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbCharacters, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function is called when the user click on the <i>Új...</i> button.
     * It opens an <code>CharacterEditDialog</code> and creates the character.
     * @param evt 
     */
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        CharacterEditDialog characterEdit = new CharacterEditDialog(new JFrame(), Optional.empty());
        characterEdit.setVisible(true);
        Optional<DndCharacter> character = characterEdit.getCharacter();
        if (character.isPresent()) {
            try {
                characterRepository.save(character.get());
                characterListModel.addElement(character.get());
                details.setVisible(false);
                listCharacters.clearSelection();
                for (Ability ability : character.get().getAbilities()) {
                    try {
                        abilityRepository.save(ability, character.get().getId());
                    } catch (AbilityDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + ability + " képesség létrehozása nem sikerült.", "Képesség létrehozása", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
                for (Equipment equipment : character.get().getEquipment()) {
                    try {
                        equipmentRepository.save(equipment, character.get().getId());
                    } catch (EquipmentDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + equipment.getName() + " felszerelés létrehozása nem sikerült.", "Felszerelés létrehozása", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
            } catch (CharacterDAOException ex) {
                JOptionPane.showMessageDialog(this, "A karakter létrehozása nem sikerült.", "Karakter létrehozása", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    /**
     * This function is called when the user clicks on the <i>Módosít..</i> button.
     * It opens an <code>CharacterEditDialog</code> and modifies the character.
     * @param evt 
     */
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (listCharacters.getSelectedValue() == null) {
            return;
        }
        Optional<DndCharacter> selectedCharacter = Optional.of(listCharacters.getSelectedValue());
        Set<Ability> selectedAbilities = selectedCharacter.get().getAbilities();
        Set<Equipment> selectedEquipment = selectedCharacter.get().getEquipment();
        CharacterEditDialog characterEdit = new CharacterEditDialog(new JFrame(), selectedCharacter);
        characterEdit.setVisible(true);
        Optional<DndCharacter> character = characterEdit.getCharacter();
        if (character.isPresent()) {
            try {
                characterListModel.removeElement(selectedCharacter.get());
                characterRepository.save(character.get());
                characterListModel.addElement(character.get());
                Set<Ability> removedAbilities = new HashSet<>(selectedAbilities);
                for (Ability ability : character.get().getAbilities()) {
                    for (Ability a : removedAbilities) {
                        if (ability.equals(a)) {
                            removedAbilities.remove(a);
                            break;
                        }
                    }
                    try {
                        abilityRepository.save(ability, character.get().getId());
                    } catch (AbilityDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + ability + " képesség mentése nem sikerült.", "Képesség módosítása", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
                for (Ability ability : removedAbilities) {
                    try {
                        abilityRepository.delete(ability.getId());
                    } catch (AbilityDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + ability + " képesség törlése nem sikerült.", "Képesség törlése", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
                Set<Equipment> removedEquipment = new HashSet<>(selectedEquipment);
                for (Equipment equipment : character.get().getEquipment()) {
                    for (Equipment e : removedEquipment) {
                        if (equipment.equals(e)) {
                            removedEquipment.remove(e);
                            break;
                        }
                    }
                    try {
                        equipmentRepository.save(equipment, character.get().getId());
                    } catch (EquipmentDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + equipment.getName() + " felszerelés mentése nem sikerült.", "Felszerelés módosítása", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
                for (Equipment equipment : removedEquipment) {
                    try {
                        equipmentRepository.delete(equipment.getId());
                    } catch (EquipmentDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + equipment.getName() + " felszerelés törlése nem sikerült.", "Felszerelés törlése", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
                details.setVisible(false);
                listCharacters.clearSelection();
            } catch (CharacterDAOException ex) {
                JOptionPane.showMessageDialog(this, "A karakter módosítása nem sikerült.", "Karakter módosítása", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    /**
     * This function is called when the user clicks on the <i>Töröl</i> button.
     * It deletes the selected character.
     * @param evt 
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (listCharacters.getSelectedValue() == null) {
            return;
        }
        int input = JOptionPane.showConfirmDialog(this, "Biztosan törölni szeretnéd a kiválasztott elemet?", "Karakter törlése", JOptionPane.YES_NO_OPTION);
        if (input == 0) {
            DndCharacter deletedCharacter = listCharacters.getSelectedValue();
            try {;
                characterRepository.delete(deletedCharacter.getId());
                characterRepository.deleteConnections(deletedCharacter.getId());
                characterListModel.removeElement(deletedCharacter);
                for (Ability ability : deletedCharacter.getAbilities()) {
                    try {
                        abilityRepository.delete(ability.getId());
                    } catch (AbilityDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + ability + " képesség törlése nem sikerült.", "Képesség törlése", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
                for (Equipment equipment : deletedCharacter.getEquipment()) {
                    try {
                        equipmentRepository.delete(equipment.getId());
                    } catch (EquipmentDAOException ex) {
                        JOptionPane.showMessageDialog(this, "A " + equipment.getName() + " felszerelés törlése nem sikerült.", "Felszerelés törlése", JOptionPane.ERROR_MESSAGE);
                        System.err.println(ex.getMessage());
                    }
                }
                details.setVisible(false);
                listCharacters.clearSelection();
            } catch (CharacterDAOException ex) {
                JOptionPane.showMessageDialog(this, "A karakter törlése nem sikerült.", "Karakter törlése", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * This function is called when the user selects a character in the characters list.
     * It show the details of the selected character.
     * @param evt 
     */
    private void listCharactersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCharactersValueChanged
        if (listCharacters.getSelectedValue() == null) {
            return;
        }
        details.setVisible(true);
        DndCharacter character = listCharacters.getSelectedValue();
        lbName.setText(character.getName());
        lbBirthPlace.setText(character.getBirthPlace());
        lbRace.setText(character.getRace().toString());
        lbClass.setText(character.getCharacterClass().toString());
        lbLevel.setText(String.valueOf(character.getLevel()));
        lbHitPoints.setText(String.valueOf(character.getHitPoints()));
        Set<Ability> abilitiesSet = character.getAbilities();
        if (abilitiesSet == null || abilitiesSet.isEmpty()) {
            taAbilities.setText("Nincs");
        } else {
            String abilitiesLabel = "";
            Iterator<Ability> abilities = abilitiesSet.iterator();
            while(abilities.hasNext()) {
                abilitiesLabel += abilities.next().getName();
                if (abilities.hasNext()) {
                    abilitiesLabel += ", ";
                }
            }
            taAbilities.setText(abilitiesLabel);
        }
        Set<Equipment> equipmentSet = character.getEquipment();
        if (equipmentSet == null || equipmentSet.isEmpty()) {
            taEquipment.setText("Nincs");
        } else {
            String equipmentLabel = "";
            Iterator<Equipment> equipment = equipmentSet.iterator();
            while(equipment.hasNext()) {
                equipmentLabel += equipment.next().getName();
                if (equipment.hasNext()) {
                    equipmentLabel += ", ";
                }
            }
            taEquipment.setText(equipmentLabel);
        }
    }//GEN-LAST:event_listCharactersValueChanged

    /**
     * This function is called when this panel is shown.
     * It clears the list selection and hides the character's details.
     * @param evt 
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        details.setVisible(false);
        listCharacters.clearSelection();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JPanel details;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbAbilitiesHeader;
    private javax.swing.JLabel lbBirthPlace;
    private javax.swing.JLabel lbBirthPlaceHeader;
    private javax.swing.JLabel lbCharacters;
    private javax.swing.JLabel lbClass;
    private javax.swing.JLabel lbClassHeader;
    private javax.swing.JLabel lbEquipmentHeader;
    private javax.swing.JLabel lbHitPoints;
    private javax.swing.JLabel lbHitPointsHeader;
    private javax.swing.JLabel lbLevel;
    private javax.swing.JLabel lbLevelHeader;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbNameHeader;
    private javax.swing.JLabel lbRace;
    private javax.swing.JLabel lbRaceHeader;
    private javax.swing.JList<DndCharacter> listCharacters;
    private javax.swing.JTextArea taAbilities;
    private javax.swing.JTextArea taEquipment;
    // End of variables declaration//GEN-END:variables
}
