package view;

import campaign.Campaign;
import campaign.CampaignDAOException;
import campaign.CampaignRepository;
import campaign.CampaignRepositoryJDBCImpl;
import character.DndCharacter;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class CampaignPanel extends javax.swing.JPanel {
    
    private DefaultListModel<Campaign> campaignListModel;
    private CampaignRepository campaignRepository;
    
    /**
     * Creates new form CampaignPanel
     */
    public CampaignPanel() {
        initComponents();
        try {
            campaignRepository = new CampaignRepositoryJDBCImpl(DndFrame.getConn());
        } catch (CampaignDAOException ex) {
            JOptionPane.showMessageDialog(this, "Hiba a kampány adatbázisműveleteinek inicializálásakor. A program leáll.", "Adatbázis hiba!", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
            System.exit(1);
        }
        
        campaignListModel = new DefaultListModel<>();
        List<Campaign> campaigns = null;
        try {
            campaigns = campaignRepository.findAll();
        } catch (CampaignDAOException ex) {
            JOptionPane.showMessageDialog(this, "A kampányok betöltése sikertelen.", "Adatbázis hiba!", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
        }
        if (campaigns != null) {
            campaignListModel.addAll(campaigns);
        }
        listCampaigns.setModel(campaignListModel);
        details.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbCampaigns = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCampaigns = new javax.swing.JList<>();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        details = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taBackgroundStory = new javax.swing.JTextArea();
        lbDungeonMaster = new javax.swing.JLabel();
        lbCharactersHeader = new javax.swing.JLabel();
        lbWorld = new javax.swing.JLabel();
        lbWorldHeader = new javax.swing.JLabel();
        lbBackgroundStoryHeader = new javax.swing.JLabel();
        lbName = new javax.swing.JLabel();
        lbNameHeader = new javax.swing.JLabel();
        lbDungeonMasterHeader = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taCharacters = new javax.swing.JTextArea();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbCampaigns.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbCampaigns.setText("Kampányok:");

        listCampaigns.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listCampaigns.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCampaignsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listCampaigns);

        btnNew.setText("Új...");
        btnNew.setMaximumSize(new java.awt.Dimension(81, 23));
        btnNew.setMinimumSize(new java.awt.Dimension(81, 23));
        btnNew.setPreferredSize(new java.awt.Dimension(81, 23));
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Módosít...");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Töröl");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        taBackgroundStory.setEditable(false);
        taBackgroundStory.setBackground(new java.awt.Color(240, 240, 240));
        taBackgroundStory.setColumns(20);
        taBackgroundStory.setLineWrap(true);
        taBackgroundStory.setRows(5);
        taBackgroundStory.setWrapStyleWord(true);
        taBackgroundStory.setFocusable(false);
        jScrollPane2.setViewportView(taBackgroundStory);

        lbDungeonMaster.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbCharactersHeader.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbCharactersHeader.setText("Karakterek:");

        lbWorld.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbWorldHeader.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbWorldHeader.setText("Világ neve:");

        lbBackgroundStoryHeader.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbBackgroundStoryHeader.setText("Háttértörténet:");

        lbName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbNameHeader.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbNameHeader.setText("Név:");

        lbDungeonMasterHeader.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbDungeonMasterHeader.setText("DM:");

        taCharacters.setEditable(false);
        taCharacters.setBackground(new java.awt.Color(240, 240, 240));
        taCharacters.setColumns(20);
        taCharacters.setLineWrap(true);
        taCharacters.setRows(5);
        taCharacters.setWrapStyleWord(true);
        taCharacters.setFocusable(false);
        jScrollPane3.setViewportView(taCharacters);

        javax.swing.GroupLayout detailsLayout = new javax.swing.GroupLayout(details);
        details.setLayout(detailsLayout);
        detailsLayout.setHorizontalGroup(
            detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(detailsLayout.createSequentialGroup()
                        .addComponent(lbDungeonMasterHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbDungeonMaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(detailsLayout.createSequentialGroup()
                        .addComponent(lbWorldHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbWorld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(detailsLayout.createSequentialGroup()
                        .addComponent(lbNameHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(detailsLayout.createSequentialGroup()
                        .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbBackgroundStoryHeader)
                            .addComponent(lbCharactersHeader))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        detailsLayout.setVerticalGroup(
            detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsLayout.createSequentialGroup()
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbNameHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(lbName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbDungeonMasterHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDungeonMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbWorld, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbWorldHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbCharactersHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbBackgroundStoryHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCampaigns)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lbCampaigns, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(details, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function is called when the user selects a campaign in the campaigns list.
     * It show the details of the selected campaign.
     * @param evt 
     */
    private void listCampaignsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCampaignsValueChanged
        if (listCampaigns.getSelectedValue() == null) {
            return;
        }
        details.setVisible(true);
        Campaign campaign = listCampaigns.getSelectedValue();
        lbName.setText(campaign.getName());
        lbDungeonMaster.setText(campaign.getDungeonMaster());
        lbWorld.setText(campaign.getWorld());
        String backgroundStory = campaign.getBackgroundStory();
        taBackgroundStory.setText(backgroundStory.isBlank() ? "Nincs" : backgroundStory);
        Set<DndCharacter> dndCharacterSet = campaign.getCharacters();
        if (dndCharacterSet == null || dndCharacterSet.isEmpty()) {
            taCharacters.setText("Nincs");
            return;
        }
        String charactersLabel = "";
        Iterator<DndCharacter> dndCharacters = dndCharacterSet.iterator();
        while(dndCharacters.hasNext()) {
            charactersLabel += dndCharacters.next().getName();
            if (dndCharacters.hasNext()) {
                charactersLabel += ", ";
            }
        }
        taCharacters.setText(charactersLabel);
    }//GEN-LAST:event_listCampaignsValueChanged

    /**
     * This function is called when the user click on the <i>Új...</i> button.
     * It opens an <code>CampaignEditDialog</code> and creates the campaign.
     * @param evt 
     */
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        CampaignEditDialog campaignEdit = new CampaignEditDialog(new JFrame(), Optional.empty());
        campaignEdit.setVisible(true);
        Optional<Campaign> campaign = campaignEdit.getCampaign();
        if (campaign.isPresent()) {
            try {
                campaignRepository.save(campaign.get());
                campaignListModel.addElement(campaign.get());
                for (DndCharacter character : campaign.get().getCharacters()) {
                    campaignRepository.addCharacter(campaign.get().getId(), character.getId());
                }
                details.setVisible(false);
                listCampaigns.clearSelection();
            } catch (CampaignDAOException ex) {
                JOptionPane.showMessageDialog(this, "A kampány létrehozása nem sikerült.", "Kampány létrehozása", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    /**
     * This function is called when the user clicks on the <i>Módosít..</i> button.
     * It opens an <code>CampaignEditDialog</code> and modifies the campaign.
     * @param evt 
     */
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (listCampaigns.getSelectedValue() == null) {
            return;
        }
        Optional<Campaign> selectedCampaign = Optional.of(listCampaigns.getSelectedValue());
        CampaignEditDialog campaignEdit = new CampaignEditDialog(new JFrame(), selectedCampaign);
        campaignEdit.setVisible(true);
        Optional<Campaign> campaign = campaignEdit.getCampaign();
        if (campaign.isPresent()) {
            try {
                campaignListModel.removeElement(selectedCampaign.get());
                campaignRepository.save(campaign.get());
                campaignListModel.addElement(campaign.get());
                Set<DndCharacter> addedCharacters = new HashSet<>(campaign.get().getCharacters());
                addedCharacters.removeAll(selectedCampaign.get().getCharacters());
                Set<DndCharacter> removedCharacters = new HashSet<>(selectedCampaign.get().getCharacters());
                removedCharacters.removeAll(campaign.get().getCharacters());
                for (DndCharacter character : addedCharacters) {
                    campaignRepository.addCharacter(campaign.get().getId(), character.getId());
                }
                for (DndCharacter character : removedCharacters) {
                    campaignRepository.removeCharacter(campaign.get().getId(), character.getId());
                }
                details.setVisible(false);
                listCampaigns.clearSelection();
            } catch (CampaignDAOException ex) {
                JOptionPane.showMessageDialog(this, "A kampány módosítása nem sikerült.", "Kampány módosítása", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    /**
     * This function is called when the user clicks on the <i>Töröl</i> button.
     * It deletes the selected campaign.
     * @param evt 
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (listCampaigns.getSelectedValue() == null) {
            return;
        }
        int input = JOptionPane.showConfirmDialog(this, "Biztosan törölni szeretnéd a kiválasztott elemet?", "Kampány törlése", JOptionPane.YES_NO_OPTION);
        if (input == 0) {
            try {
                campaignRepository.delete(listCampaigns.getSelectedValue().getId());
                campaignRepository.deleteConnections(listCampaigns.getSelectedValue().getId());
                campaignListModel.removeElement(listCampaigns.getSelectedValue());
                details.setVisible(false);
                listCampaigns.clearSelection();
            } catch (CampaignDAOException ex) {
                JOptionPane.showMessageDialog(this, "A kampány törlése nem sikerült.", "Kampány törlése", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * This function is called when this panel is shown.
     * It clears the list selection and hides the campaign's details.
     * @param evt 
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        details.setVisible(false);
        listCampaigns.clearSelection();
    }//GEN-LAST:event_formComponentShown

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JPanel details;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbBackgroundStoryHeader;
    private javax.swing.JLabel lbCampaigns;
    private javax.swing.JLabel lbCharactersHeader;
    private javax.swing.JLabel lbDungeonMaster;
    private javax.swing.JLabel lbDungeonMasterHeader;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbNameHeader;
    private javax.swing.JLabel lbWorld;
    private javax.swing.JLabel lbWorldHeader;
    private javax.swing.JList<Campaign> listCampaigns;
    private javax.swing.JTextArea taBackgroundStory;
    private javax.swing.JTextArea taCharacters;
    // End of variables declaration//GEN-END:variables
}
